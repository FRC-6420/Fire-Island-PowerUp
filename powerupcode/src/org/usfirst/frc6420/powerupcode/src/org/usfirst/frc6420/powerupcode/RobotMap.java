// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6420.powerupcode;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.sensors.PigeonIMU;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.VictorSP;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveBaseBackRight;
    public static SpeedController driveBaseFrontRight;
    public static SpeedControllerGroup driveBaseRightDrive;
    public static SpeedController driveBaseBackLeft;
    public static SpeedController driveBaseFrontLeft;
    public static SpeedControllerGroup driveBaseLeftDrive;
    public static SpeedController liftLiftMotor2;
    public static SpeedController liftLiftMotor1;
    public static SpeedControllerGroup liftLiftMotors;
    public static Encoder liftLiftEncoder;
    public static SpeedController grabberGrabMotorLeft;
    public static SpeedController grabberGrabMotorRight;
    public static SpeedControllerGroup grabberGrabMotors;
    public static DigitalInput digitalInputsLeftSelector;
    public static DigitalInput digitalInputsCenterSelector;
    public static DigitalInput digitalInputsRightSelector;
    public static Encoder digitalInputsLeftEncoder;
    public static Encoder digitalInputsRightEncoder;
    public static PigeonIMU digitalInputsPigeonIMU1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveBaseBackRight = new VictorSP(4);
        LiveWindow.addActuator("DriveBase", "BackRight", (VictorSP) driveBaseBackRight);
        driveBaseBackRight.setInverted(false);
        driveBaseFrontRight = new VictorSP(3);
        LiveWindow.addActuator("DriveBase", "FrontRight", (VictorSP) driveBaseFrontRight);
        driveBaseFrontRight.setInverted(false);
        driveBaseRightDrive = new SpeedControllerGroup(driveBaseBackRight, driveBaseFrontRight  );
        LiveWindow.addActuator("DriveBase", "RightDrive", driveBaseRightDrive);
        
        driveBaseBackLeft = new VictorSP(2);
        LiveWindow.addActuator("DriveBase", "BackLeft", (VictorSP) driveBaseBackLeft);
        driveBaseBackLeft.setInverted(false);
        driveBaseFrontLeft = new VictorSP(1);
        LiveWindow.addActuator("DriveBase", "FrontLeft", (VictorSP) driveBaseFrontLeft);
        driveBaseFrontLeft.setInverted(false);
        driveBaseLeftDrive = new SpeedControllerGroup(driveBaseBackLeft, driveBaseFrontLeft  );
        LiveWindow.addActuator("DriveBase", "LeftDrive", driveBaseLeftDrive);
        
        liftLiftMotor2 = new VictorSP(6);
        LiveWindow.addActuator("Lift", "LiftMotor2", (VictorSP) liftLiftMotor2);
        liftLiftMotor2.setInverted(false);
        liftLiftMotor1 = new VictorSP(5);
        LiveWindow.addActuator("Lift", "LiftMotor1", (VictorSP) liftLiftMotor1);
        liftLiftMotor1.setInverted(false);
        liftLiftMotors = new SpeedControllerGroup(liftLiftMotor1, liftLiftMotor2  );
        LiveWindow.addActuator("Lift", "LiftMotors", liftLiftMotors);
        
        liftLiftEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Lift", "LiftEncoder", liftLiftEncoder);
        liftLiftEncoder.setDistancePerPulse(1.0);
        liftLiftEncoder.setPIDSourceType(PIDSourceType.kRate);
        grabberGrabMotorLeft = new VictorSP(7);
        LiveWindow.addActuator("Grabber", "GrabMotorLeft", (VictorSP) grabberGrabMotorLeft);
        grabberGrabMotorLeft.setInverted(true);
        grabberGrabMotorRight = new VictorSP(8);
        LiveWindow.addActuator("Grabber", "GrabMotorRight", (VictorSP) grabberGrabMotorRight);
        grabberGrabMotorRight.setInverted(false);
        grabberGrabMotors = new SpeedControllerGroup(grabberGrabMotorLeft, grabberGrabMotorRight  );
        LiveWindow.addActuator("Grabber", "GrabMotors", grabberGrabMotors);
        
        digitalInputsLeftSelector = new DigitalInput(9);
        LiveWindow.addSensor("DigitalInputs", "LeftSelector", digitalInputsLeftSelector);
        
        digitalInputsCenterSelector = new DigitalInput(8);
        LiveWindow.addSensor("DigitalInputs", "CenterSelector", digitalInputsCenterSelector);
        
        digitalInputsRightSelector = new DigitalInput(7);
        LiveWindow.addSensor("DigitalInputs", "RightSelector", digitalInputsRightSelector);
        
        digitalInputsLeftEncoder = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("DigitalInputs", "LeftEncoder", digitalInputsLeftEncoder);
        digitalInputsLeftEncoder.setDistancePerPulse(1.0);
        digitalInputsLeftEncoder.setPIDSourceType(PIDSourceType.kRate);
        digitalInputsRightEncoder = new Encoder(4, 5, false, EncodingType.k4X);
        LiveWindow.addSensor("DigitalInputs", "RightEncoder", digitalInputsRightEncoder);
        digitalInputsRightEncoder.setDistancePerPulse(1.0);
        digitalInputsRightEncoder.setPIDSourceType(PIDSourceType.kRate);
        digitalInputsPigeonIMU1 = new PigeonIMU(0);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
