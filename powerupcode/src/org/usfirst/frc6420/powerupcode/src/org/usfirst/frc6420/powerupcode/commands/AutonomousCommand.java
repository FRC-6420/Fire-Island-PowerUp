// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6420.powerupcode.commands;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc6420.powerupcode.Constants;
import org.usfirst.frc6420.powerupcode.Robot;
import org.usfirst.frc6420.powerupcode.subsystems.DigitalInputs;




/**
 *
 */
public class AutonomousCommand extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutonomousCommand() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	setTimeout(Constants.autoForwardTime);
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	
    	Constants.gameData = DriverStation.getInstance().getGameSpecificMessage();
    	

    	
    	if(Constants.gameData.length() > 0)
		{
    		Constants.ourSwitch = Constants.gameData.charAt(0);
    		Constants.scale = Constants.gameData.charAt(1);
		}
		 else {
	    		Constants.ourSwitch = 'N';
	    		Constants.scale = 'N';
			
		}
    	
    /*	
    	if (Robot.digitalInputs.leftSelectorOn()) {
    		if(gameData.length() > 0)
    		{
    			if(gameData.charAt(0) == 'L')
    			{
    			// Put Left code here. 
    		    	Robot.driveBase.setMotorSpeeds(Constants.autoForwardSpeed, Constants.autoForwardSpeed2);

    			} else {
    			// Put Right Code here.
    		    	Robot.driveBase.setMotorSpeeds(Constants.autoForwardSpeed, Constants.autoForwardSpeed2);

    			}
    		}
    	} else if (Robot.digitalInputs.centerSelectorOn()) {
       		if(gameData.length() > 0)
    		{
    			if(gameData.charAt(0) == 'L')
    			{
    			// Put Left code here. 
    		    	Robot.driveBase.setMotorSpeeds(Constants.autoForwardSpeed, Constants.autoForwardSpeed2);

    			} else {
    			// Put Right Code here.
    		    	Robot.driveBase.setMotorSpeeds(Constants.autoForwardSpeed, Constants.autoForwardSpeed2);

    			}
    		}
    		
    	}else if (Robot.digitalInputs.rightSelectorOn()) {
       		if(gameData.length() > 0)
    		{
    			if(gameData.charAt(0) == 'L')
    			{
    			// Put Left code here. 
    		    	Robot.driveBase.setMotorSpeeds(Constants.autoForwardSpeed, Constants.autoForwardSpeed2);

    			} else {
    			// Put Right Code here.
    		    	Robot.driveBase.setMotorSpeeds(Constants.autoForwardSpeed, Constants.autoForwardSpeed2);

    			}
    		}
    		
    	}*/
    	
    	
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	Robot.driveBase.setMotorSpeeds(-.25, -.25);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return isTimedOut();
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.driveBase.setMotorSpeeds(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	end();
    }
}
