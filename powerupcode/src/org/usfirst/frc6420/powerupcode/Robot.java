// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6420.powerupcode;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc6420.powerupcode.commands.*;
import org.usfirst.frc6420.powerupcode.subsystems.*;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DriverStation;


/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveBase driveBase;
    public static Lift lift;
    public static Grabber grabber;
    public static DigitalInputs digitalInputs;
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    CameraServer server  = CameraServer.getInstance();
    
    
    @Override
    public void robotInit() {
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveBase = new DriveBase();
        lift = new Lift();
        grabber = new Grabber();
        digitalInputs = new DigitalInputs();
        server.startAutomaticCapture("cam0",0);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.addDefault("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
    	
    	Constants.gameData = DriverStation.getInstance().getGameSpecificMessage();
    	
    	System.out.println("autonousInit");
    	if(Constants.gameData.length() > 0)
		{
    		Constants.ourSwitch = Constants.gameData.charAt(0);
    		Constants.scale = Constants.gameData.charAt(1);
		}
		 else {
	    		Constants.ourSwitch = 'N';
	    		Constants.scale = 'N';
			
		}
    	System.out.println("Ourswitch" + Constants.ourSwitch);
    
    	Constants.robotpos = 'R';
    	
    /*	if (Robot.digitalInputs.leftSelectorOn()) {
    		Constants.robotpos = 'L';
    	} 
    	if (Robot.digitalInputs.centerSelectorOn()) {
    		Constants.robotpos = 'C';
    	} 
    	if (Robot.digitalInputs.rightSelectorOn()) {
    		Constants.robotpos = 'R';
    	}
    	*/				
    				
    				
    	System.out.println("robotpos " + Constants.robotpos);		
    	 	    	
    	/*
    	if (Constants.robotpos == 'L') {
    		if(Constants.ourSwitch == 'L')
    		{
    			System.out.println("robotposLeftSwitch");
    			chooser.addDefault("Autonomous Command", new robotPosLeftSwitch());
    			autonomousCommand = chooser.getSelected();
    		}else if(Constants.scale == 'L')
    			{
    				autonomousCommand = chooser.getSelected();
    			}else{
    				autonomousCommand = chooser.getSelected();
    			}
    		
    	}else if (Constants.robotpos == 'R') {
        		if(Constants.ourSwitch == 'R')
        		{
        			System.out.println("robotposLeftSwitch");
        			chooser.addDefault("Autonomous Command", new robotPosRightSwitch());
        			autonomousCommand = chooser.getSelected();
        		}else if(Constants.scale == 'R')
        			{
        				autonomousCommand = chooser.getSelected();
        			}else{
        				autonomousCommand = chooser.getSelected();
        			}
        		
        	}else if (Constants.robotpos == 'C') {
            		if(Constants.ourSwitch == 'L')
            		{
            			chooser.addDefault("Autonomous Command", new robotPosCenterSwitchLeft());
            			 autonomousCommand = chooser.getSelected();
            		}else if(Constants.ourSwitch == 'R')
            			{
            			chooser.addDefault("Autonomous Command", new robotPosCenterSwitchRight());
            			 	autonomousCommand = chooser.getSelected();            			
            			}
            	else{
            		autonomousCommand = chooser.getSelected();
            	}
    	}
    	*/
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }
}
